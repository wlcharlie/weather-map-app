{"version":3,"sources":["ColorModeSwitcher.js","components/Map.js","api/weatherAPI.js","utils/tempConvert.js","utils/unixConvert.js","components/Weather.js","components/Chart.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","Map","useState","map","setMap","mark","setMark","mapDom","useRef","useEffect","resizeMap","a","mapping","getViewPort","resize","platform","H","service","Platform","apikey","process","layers","createDefaultLayers","current","vector","normal","pixelRatio","window","devicePixelRatio","center","target","zoom","marker","Marker","addObject","mapEvents","mapevents","MapEvents","addEventListener","evt","coord","screenToGeo","currentPointer","viewportX","viewportY","getCoordinate","lat","toFixed","lng","Behavior","removeEventListener","removeObject","w","h","ref","React","memo","currentWeather","options_CURRENT","method","url","params","lon","units","headers","axios","request","data","dailyWeather","options_DAILY","cnt","tempConvert","K","tempC","Number","tempF","tempK","unixConvert","unix","timezone","userTime","moment","format","utcTime","utc","localTime","utcOffset","Weather","setCurrent","flip","options","useSpring","to","opacity","from","delay","config","duration","reset","reverse","temp_feel","temp_high","temp_low","main","temp","split","feels_like","temp_max","temp_min","molasses","loop","x","slow","rest","div","style","templateColumns","templateRows","direction","alignItems","justifyContent","display","width","height","src","weather","n","px","justify","align","name","dt","slice","join","my","spacing","className","Chart","date","daily","setDaily","console","log","list","e","push","dailyDummy","city","day","labels","datasets","label","fill","backgroundColor","borderColor","responsive","maintainAspectRatio","scales","y","plugins","title","tooltip","callbacks","v","raw","App","setTarget","coordinate","useCallback","theme","textAlign","minH","gap","borderRadius","colSpan","href","justifySelf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","require","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6af10811.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Box } from '@chakra-ui/layout';\r\nimport H from '@here/maps-api-for-javascript';\r\n\r\nconst Map = props => {\r\n  const [map, setMap] = useState(null);\r\n  const [mark, setMark] = useState({});\r\n  const mapDom = useRef();\r\n\r\n  useEffect(async () => {\r\n    function resizeMap(mapping) {\r\n      mapping.getViewPort().resize();\r\n    }\r\n    if (!map) {\r\n      const platform = new H.service.Platform({\r\n        apikey: process.env.REACT_APP_MAP_API,\r\n      });\r\n\r\n      const layers = platform.createDefaultLayers();\r\n      const mapping = new H.Map(mapDom.current, layers.vector.normal.map, {\r\n        pixelRatio: window.devicePixelRatio,\r\n        center: props.target,\r\n        zoom: 12,\r\n      });\r\n      const marker = new H.map.Marker(props.target);\r\n      mapping.addObject(marker);\r\n      setMark(marker);\r\n\r\n      const mapEvents = new H.mapevents.MapEvents(mapping);\r\n      mapping.addEventListener('tap', function getCoord(evt) {\r\n        const coord = mapping.screenToGeo(\r\n          evt.currentPointer.viewportX,\r\n          evt.currentPointer.viewportY\r\n        );\r\n        props.getCoordinate({\r\n          lat: +coord.lat.toFixed(4),\r\n          lng: +coord.lng.toFixed(4),\r\n        });\r\n      });\r\n\r\n      const behavior = new H.mapevents.Behavior(mapEvents);\r\n      window.addEventListener('resize', resizeMap(mapping));\r\n      setMap(mapping);\r\n    }\r\n\r\n    return window.removeEventListener('resize', resizeMap);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (map) {\r\n      map.removeObject(mark);\r\n      const marker = new H.map.Marker(props.target);\r\n      map.addObject(marker);\r\n      setMark(marker);\r\n    }\r\n  }, [props.target]);\r\n\r\n  return <Box w=\"100%\" h={['100%', '50vh']} ref={mapDom} />;\r\n};\r\n\r\nexport default React.memo(Map);\r\n","import axios from 'axios';\r\n\r\nexport const currentWeather = async ({ lat, lng }) => {\r\n  const options_CURRENT = {\r\n    method: 'GET',\r\n    url: 'https://community-open-weather-map.p.rapidapi.com/weather',\r\n    params: {\r\n      lat: lat,\r\n      lon: lng,\r\n      units: '\"metric\" or \"imperial\"',\r\n    },\r\n    headers: {\r\n      'x-rapidapi-key': process.env.REACT_APP_RAPID_API,\r\n      'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com',\r\n    },\r\n  };\r\n\r\n  const data = await axios.request(options_CURRENT);\r\n  return data;\r\n};\r\n\r\nexport const dailyWeather = async ({ lat, lng }) => {\r\n  const options_DAILY = {\r\n    method: 'GET',\r\n    url: 'https://community-open-weather-map.p.rapidapi.com/forecast/daily',\r\n    params: {\r\n      lat: lat,\r\n      lon: lng,\r\n      cnt: '7',\r\n      units: 'metric or imperial',\r\n    },\r\n    headers: {\r\n      'x-rapidapi-key': process.env.REACT_APP_RAPID_API,\r\n      'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com',\r\n    },\r\n  };\r\n\r\n  const data = await axios.request(options_DAILY);\r\n  return data;\r\n};\r\n","export const tempConvert = K => {\r\n  const tempC = Number((K - 273.15).toFixed(0));\r\n  const tempF = Number(((K * 9) / 5 - 459.67).toFixed(0));\r\n  return {\r\n    tempC: tempC + ' \\xB0C',\r\n    tempF: tempF + ' \\xB0F',\r\n    tempK: Number(K.toFixed(0)),\r\n  };\r\n};\r\n","import moment from 'moment';\r\n\r\nexport const unixConvert = (unix, timezone) => {\r\n  const userTime = moment.unix(unix).format('MMM DD HH Z');\r\n  const utcTime = moment.unix(unix).utc().format('MMM DD HH Z');\r\n  const localTime = moment\r\n    .unix(unix)\r\n    .utcOffset(timezone / 60)\r\n    .format('MMM DD HH Z');\r\n\r\n  return { userTime, utcTime, localTime };\r\n};\r\n","import { useState, useEffect } from 'react';\r\n\r\nimport { currentWeather } from '../api/weatherAPI';\r\nimport { tempConvert } from '../utils/tempConvert';\r\nimport { unixConvert } from '../utils/unixConvert';\r\n\r\nimport { useSpring, animated, config, useSpringRef } from 'react-spring';\r\n\r\nimport currentDummy from '../currentDummy.json';\r\nimport {\r\n  Text,\r\n  Flex,\r\n  Grid,\r\n  GridItem,\r\n  Divider,\r\n  HStack,\r\n  Skeleton,\r\n  Image,\r\n  Box,\r\n} from '@chakra-ui/react';\r\n\r\nconst Weather = ({ target }) => {\r\n  const [current, setCurrent] = useState(null);\r\n  const [flip, set] = useState(false);\r\n\r\n  const options = useSpring({\r\n    to: { opacity: 1 },\r\n    from: { opacity: 0 },\r\n    delay: 500,\r\n    config: { duration: 1500 },\r\n  });\r\n  const { tempC, temp_feel, temp_high, temp_low } = useSpring({\r\n    reset: true,\r\n    reverse: flip,\r\n    from: { tempC: 0, temp_feel: 0, temp_high: 0, temp_low: 0 },\r\n    tempC: current && +tempConvert(current.data.main.temp).tempC.split(' ')[0],\r\n    temp_feel:\r\n      current && +tempConvert(current.data.main.feels_like).tempC.split(' ')[0],\r\n    temp_high:\r\n      current && +tempConvert(current.data.main.temp_max).tempC.split(' ')[0],\r\n    temp_low:\r\n      current && +tempConvert(current.data.main.temp_min).tempC.split(' ')[0],\r\n    delay: 600,\r\n    config: config.molasses,\r\n  });\r\n  const { size, ...rest } = useSpring({\r\n    loop: true,\r\n    from: { x: 0 },\r\n    to: [{ x: 20 }, { x: 0 }],\r\n    delay: 100,\r\n    config: { ...config.slow, duration: 5000 },\r\n  });\r\n\r\n  // const { userTime, utcTime, localTime } = unixConvert(\r\n  //   current.data.dt,\r\n  //   current.data.timezone\r\n  // );\r\n\r\n  useEffect(async () => {\r\n    setCurrent(await currentWeather(target));\r\n  }, [target]);\r\n\r\n  return current ? (\r\n    <animated.div style={options}>\r\n      <Grid\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        templateColumns={['1fr 1fr', '1fr']}\r\n        templateRows={[null, '1fr 1fr']}\r\n      >\r\n        <GridItem>\r\n          <Flex\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            direction={['column', 'row']}\r\n            alignItems=\"center\"\r\n            justifyContent={['center', 'space-around']}\r\n          >\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n              <animated.div style={{ ...rest, width: size, height: size }}>\r\n                <Image\r\n                  src={`http://openweathermap.org/img/wn/${current.data.weather[0].icon}@2x.png`}\r\n                />\r\n              </animated.div>\r\n            </Box>\r\n            {/* <Text className={`fas fa-cloud fa-5x`} color=\"gray.300\" /> */}\r\n            <Box>\r\n              <Text fontSize=\"3xl\">\r\n                <animated.div>\r\n                  {tempC.to(n => n.toFixed(0) + ` \\xB0C`)}\r\n                </animated.div>\r\n              </Text>\r\n              <Text>{current.data.weather[0].main}</Text>\r\n            </Box>\r\n          </Flex>\r\n        </GridItem>\r\n        <GridItem px={2}>\r\n          <Flex direction=\"column\" h=\"100%\" justify=\"center\">\r\n            <Flex justify=\"space-between\" align=\"baseline\">\r\n              <Text fontSize=\"2xl\">{current.data.name}</Text>\r\n              <Text fontSize=\"sm\">\r\n                {unixConvert(current.data.dt, current.data.timezone)\r\n                  .localTime.split(' ')\r\n                  .slice(0, 3)\r\n                  .join(' ') + 'hr'}\r\n              </Text>\r\n            </Flex>\r\n            <Divider my={2} />\r\n            <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n              <HStack spacing=\"16px\">\r\n                <Text className=\"fas fa-child\" />\r\n                <Text fontSize=\"md\">Feels Like</Text>\r\n              </HStack>\r\n              <Text>\r\n                <animated.div>\r\n                  {temp_feel.to(n => n.toFixed(0) + ` \\xB0C`)}\r\n                </animated.div>\r\n              </Text>\r\n            </Flex>\r\n            <Divider my={1} />\r\n            <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n              <HStack spacing=\"12px\">\r\n                <Text className=\"fas fa-temperature-high\" />\r\n                <Text fontSize=\"md\">High</Text>\r\n              </HStack>\r\n              <Text>\r\n                <animated.div>\r\n                  {temp_high.to(n => n.toFixed(0) + ` \\xB0C`)}\r\n                </animated.div>\r\n              </Text>\r\n            </Flex>\r\n            <Divider my={1} />\r\n            <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n              <HStack spacing=\"12px\">\r\n                <Text className=\"fas fa-temperature-low\" />\r\n                <Text fontSize=\"md\">Low</Text>\r\n              </HStack>\r\n              <Text>\r\n                <animated.div>\r\n                  {temp_low.to(n => n.toFixed(0) + ` \\xB0C`)}\r\n                </animated.div>\r\n              </Text>\r\n            </Flex>\r\n          </Flex>\r\n        </GridItem>\r\n      </Grid>\r\n    </animated.div>\r\n  ) : (\r\n    <Grid\r\n      w=\"100%\"\r\n      h=\"100%\"\r\n      templateColumns={['1fr 1fr', '1fr']}\r\n      templateRows={[null, '1fr 1fr']}\r\n    >\r\n      <GridItem>\r\n        <Flex\r\n          w=\"100%\"\r\n          h=\"100%\"\r\n          direction={['column', 'row']}\r\n          alignItems=\"center\"\r\n          justifyContent={['center', 'space-around']}\r\n        >\r\n          <Skeleton width=\"125px\" height=\"125px\">\r\n            pic\r\n          </Skeleton>\r\n          <Box>\r\n            <Skeleton>weather</Skeleton>\r\n          </Box>\r\n        </Flex>\r\n      </GridItem>\r\n      <GridItem px={2}>\r\n        <Flex direction=\"column\" h=\"100%\" justify=\"center\">\r\n          <Flex justify=\"space-between\" align=\"baseline\">\r\n            <Skeleton>Place</Skeleton>\r\n            <Skeleton>Date</Skeleton>\r\n          </Flex>\r\n          <Divider my={2} />\r\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n            <Skeleton width=\"100%\">temp</Skeleton>\r\n          </Flex>\r\n          <Divider my={1} />\r\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n            <Skeleton width=\"100%\">temp</Skeleton>\r\n          </Flex>\r\n          <Divider my={1} />\r\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n            <Skeleton width=\"100%\">temp</Skeleton>\r\n          </Flex>\r\n        </Flex>\r\n      </GridItem>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import { Line } from 'react-chartjs-2';\r\nimport { Skeleton } from '@chakra-ui/skeleton';\r\n\r\nimport { unixConvert } from '../utils/unixConvert';\r\nimport { tempConvert } from '../utils/tempConvert';\r\nimport { dailyWeather } from '../api/weatherAPI';\r\nimport dailyDummy from '../dailyDummy.json';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst Chart = ({ target }) => {\r\n  let date = [];\r\n  let temp = [];\r\n  const [daily, setDaily] = useState(null);\r\n\r\n  useEffect(async () => {\r\n    setDaily(await dailyWeather(target));\r\n  }, [target]);\r\n  console.log(daily);\r\n\r\n  if (daily) {\r\n    date = [];\r\n    temp = [];\r\n    daily.data.list.map(e => {\r\n      date.push(unixConvert(e.dt, dailyDummy.data.city.timezone));\r\n      temp.push(tempConvert(e.temp.day));\r\n    });\r\n\r\n    const data = {\r\n      labels: date.map(e => e.localTime.split(' ').slice(0, 2).join(' ')),\r\n      datasets: [\r\n        {\r\n          label: `temperature`,\r\n          data: temp.map(e => e.tempK),\r\n          fill: false,\r\n          backgroundColor: 'salmon',\r\n          borderColor: 'salmon',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const options = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        y: { display: false },\r\n      },\r\n      plugins: {\r\n        title: { display: true, text: 'Future 7 Days of Weather' },\r\n        tooltip: {\r\n          callbacks: {\r\n            label: v => {\r\n              const temp = tempConvert(Number(v.raw));\r\n              return `${temp.tempC} | ${temp.tempF} | ${temp.tempK}K`;\r\n            },\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    return <Line data={data} options={options} />;\r\n  } else {\r\n    return (\r\n      <Skeleton width=\"100%\" height=\"100%\">\r\n        chart\r\n      </Skeleton>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useCallback } from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Grid,\n  theme,\n  Text,\n  Flex,\n  GridItem,\n  HStack,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\n\nimport Map from './components/Map';\nimport Weather from './components/Weather';\nimport Chart from './components/Chart';\n\nfunction App() {\n  const [target, setTarget] = useState({ lat: 55, lng: 38 });\n  const coordinate = useCallback(data => {\n    setTarget(data);\n  }, []);\n  console.log(target);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid\n          minH=\"100vh\"\n          gap=\"3\"\n          templateRows={['1fr 1fr 1fr 0.25fr', '50vh 40vh 5vh']}\n          templateColumns={[null, 'repeat(3, 1fr)']}\n        >\n          <GridItem w=\"100%\" h=\"100%\" borderRadius=\"lg\" colSpan={[null, '3']}>\n            <Map getCoordinate={coordinate} target={target} />\n          </GridItem>\n          <GridItem w=\"100%\" h=\"100%\" borderRadius=\"lg\" colSpan={[null, '1']}>\n            <Weather target={target} />\n          </GridItem>\n          <GridItem\n            w=\"100%\"\n            h=\"100%\"\n            px=\"3\"\n            borderRadius=\"lg\"\n            colSpan={[null, '2']}\n          >\n            <Chart target={target} />\n          </GridItem>\n          <GridItem w=\"100%\" h=\"100%\" colSpan={[null, '3']}>\n            <Flex align=\"center\" justify=\"center\" my={2}>\n              <HStack fontSize=\"md\">\n                <a href=\"https://www.linkedin.com/in/chiou-charlie/\">\n                  Charlie |\n                </a>\n                <a href=\"https://wlcharlie.github.io/\">Blog |</a>\n                <a href=\"https://github.com/wlcharlie/weather-map-app\">Repo</a>\n              </HStack>\n              <ColorModeSwitcher justifySelf=\"flex-end\" />\n            </Flex>\n          </GridItem>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nrequire('dotenv').config();\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}